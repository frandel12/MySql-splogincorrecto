USE `db`;
DROP procedure IF EXISTS `sp_ResetPassword`;

DELIMITER $$
USE `db`$$

CREATE PROCEDURE `sp_ResetPassword` (IN pEmail VARCHAR(50), 
						IN pPassword BLOB,
                        OUT pMessage VARCHAR(300))
BEGIN
	IF ((SELECT COUNT(*) FROM (SELECT Pass FROM resetpassword WHERE Mail = pEmail  LIMIT 7) AS Pass WHERE pPassword = CONVERT(AES_DECRYPT(Pass, 'key')using utf8mb4))!=0)
		THEN
		SET pMessage := 'Password ultilizada anteriormente';
        
		ELSEIF (SELECT REGEXP_LIKE(pPassword, '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$#%&/.,?])[A-Za-z[0-9]$#%&/.,?]{8,}$')!=1)
			THEN
			UPDATE login SET Password = AES_ENCRYPT(pPassword, 'key')
			WHERE Email = pEmail;
        
			INSERT INTO resetpassword (Mail,Pass,Date) VALUES (pEmail, AES_ENCRYPT(pPassword, 'key'), NOW());
			SET pMessage :='Reset Password';
	ELSE
		SET pMessage := 'Debe contener al menos una mayuscula, un numero y caracteres especiales';
		END IF;
END;$$ 

DELIMITER ;
#Este caso el reset esta correcto, deberia de mostrar un mensaje'Reset Password'
CALL sp_ResetPassword ('francogmail.com','&F55a3&',@pMessage);
SELECT @pMessage;

#Este caso el reset esta incorrecto, ya que no esta cumpliendo con los caracteres, deberia de mostrar un mensaje 'Debe contener al menos una mayuscula, un numero y caracteres especialesto'
CALL sp_ResetPassword ('francogmail.com','&r&',@pMessage);
SELECT @pMessage;

#Este caso al reset se le  esta pasando una password repetida, deberia de mostrar un mensaje 'Password ultilizada anteriormente'
CALL sp_ResetPassword ('francogmail.com','&F55a3&',@pMessage);
SELECT @pMessage;

SELECT * FROM login;
SELECT * FROM resetpassword;
SELECT Email,CAST(AES_DECRYPT(Password, 'key')AS CHAR) FROM login;
SELECT Mail,CAST(AES_DECRYPT(Pass, 'key')AS CHAR) FROM resetpassword;
